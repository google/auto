<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2012 Google LLC

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.google.auto.value</groupId>
    <artifactId>auto-value-parent</artifactId>
    <version>HEAD-SNAPSHOT</version>
  </parent>

  <artifactId>auto-value</artifactId>
  <version>HEAD-SNAPSHOT</version>
  <name>AutoValue Processor</name>
  <description>
    Immutable value-type code generation for Java 1.7+.
  </description>
  <url>https://github.com/google/auto/tree/main/value</url>

  <scm>
    <url>http://github.com/google/auto</url>
    <connection>scm:git:git://github.com/google/auto.git</connection>
    <developerConnection>scm:git:ssh://git@github.com/google/auto.git</developerConnection>
    <tag>HEAD</tag>
  </scm>

  <properties>
    <auto-service.version>1.1.1</auto-service.version>
    <errorprone.version>2.23.0</errorprone.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.google.auto</groupId>
      <artifactId>auto-common</artifactId>
      <version>1.2.2</version>
    </dependency>
    <dependency>
      <groupId>com.google.auto.service</groupId>
      <artifactId>auto-service-annotations</artifactId>
      <version>${auto-service.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.errorprone</groupId>
      <artifactId>error_prone_annotations</artifactId>
      <version>${errorprone.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.escapevelocity</groupId>
      <artifactId>escapevelocity</artifactId>
      <version>1.1</version>
    </dependency>
    <dependency>
      <groupId>net.ltgt.gradle.incap</groupId>
      <artifactId>incap</artifactId>
      <version>1.0.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
    </dependency>
    <dependency>
      <groupId>com.squareup</groupId>
      <artifactId>javapoet</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlinx</groupId>
      <artifactId>kotlinx-metadata-jvm</artifactId>
      <version>0.7.0</version>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm</artifactId>
      <version>9.6</version>
    </dependency>
    <!-- test dependencies -->
    <dependency>
      <groupId>com.google.auto.value</groupId>
      <artifactId>auto-value-annotations</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.errorprone</groupId>
      <artifactId>error_prone_type_annotations</artifactId>
      <version>${errorprone.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava-testlib</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.truth</groupId>
      <artifactId>truth</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.truth.extensions</groupId>
      <artifactId>truth-java8-extension</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.testing.compile</groupId>
      <artifactId>compile-testing</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <sourceDirectory>../src/main/java</sourceDirectory>
    <testSourceDirectory>../src/test/java</testSourceDirectory>

    <resources>
      <resource>
        <directory>../src/main/java</directory>
        <includes>
          <include>**/*.vm</include>
        </includes>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <includes>
            <include>com/google/auto/value/processor/**/*.java</include>
            <include>com/google/auto/value/extension/memoized/processor/**/*.java</include>
            <include>com/google/auto/value/extension/serializable/processor/**/*.java</include>
            <include>com/google/auto/value/extension/serializable/serializer/**/*.java</include>
            <include>com/google/auto/value/extension/toprettystring/processor/**/*.java</include>
          </includes>
          <compilerArgs>
            <!-- This is something of a hack to allow tests to pass. Ideally we would build
                 TestStringSerializerFactory as a separate artifact, to avoid a problem when it
                 is built at the same time as @AutoValue classes that might end up finding it.
                 But by allowing a missing class to be ignored, we avoid crashing if there is a
                 META-INF/services entry for a class that the compiler has not yet generated. -->
            <arg>-AallowedMissingSerializableExtensionClasses=.*TestStringSerializerFactory</arg>
          </compilerArgs>
          <annotationProcessorPaths>
            <path>
              <groupId>com.google.auto.service</groupId>
              <artifactId>auto-service</artifactId>
              <version>${auto-service.version}</version>
            </path>
            <path>
              <groupId>net.ltgt.gradle.incap</groupId>
              <artifactId>incap-processor</artifactId>
              <version>1.0.0</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
        <executions>
          <execution>
            <id>default-testCompile</id>
            <configuration>
              <compilerArgs>
                <!-- For MemoizeTest. -->
                <arg>-parameters</arg>
              </compilerArgs>
              <annotationProcessorPaths>
                <path>
                  <groupId>com.google.auto.value</groupId>
                  <artifactId>auto-value</artifactId>
                  <version>${project.version}</version>
                </path>
                <path>
                  <groupId>com.google.auto.service</groupId>
                  <artifactId>auto-service</artifactId>
                  <version>${auto-service.version}</version>
                </path>
              </annotationProcessorPaths>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.2</version>
        <configuration>
          <argLine>${test.jvm.flags}</argLine>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-invoker-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.5.1</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <minimizeJar>true</minimizeJar>
              <artifactSet>
                <excludes>
                  <exclude>com.google.code.findbugs:jsr305</exclude>
                </excludes>
              </artifactSet>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <!-- Don't include kotlinx-metadata.kotlin_module, etc. We're shading those
                         libaries and they're only used from Java. Leaving them in the jar creates
                         "incompatible version" errors from the Kotlin compiler. -->
                    <exclude>META-INF/*.kotlin_module</exclude>
                  </excludes>
                </filter>
              </filters>
              <transformers>
                <!-- Needed to avoid "No MetadataExtensions instances found in the classpath" from Kotlin reflection. -->
                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
              </transformers>
              <relocations>
                <relocation>
                  <pattern>com.google</pattern>
                  <shadedPattern>autovalue.shaded.com.google</shadedPattern>
                  <excludes>
                    <exclude>com.google.auto.value.**</exclude>
                  </excludes>
                </relocation>
                <relocation>
                  <pattern>com.squareup.javapoet</pattern>
                  <shadedPattern>autovalue.shaded.com.squareup.javapoet</shadedPattern>
                </relocation>
                <relocation>
                  <pattern>kotlin</pattern>
                  <shadedPattern>autovalue.shaded.kotlin</shadedPattern>
                </relocation>
                <relocation>
                  <pattern>kotlinx</pattern>
                  <shadedPattern>autovalue.shaded.kotlinx</shadedPattern>
                </relocation>
                <relocation>
                  <pattern>net.ltgt.gradle.incap</pattern>
                  <shadedPattern>autovalue.shaded.net.ltgt.gradle.incap</shadedPattern>
                </relocation>
                <relocation>
                  <pattern>org.checkerframework</pattern>
                  <shadedPattern>autovalue.shaded.org.checkerframework</shadedPattern>
                </relocation>
                <relocation>
                  <pattern>org.jetbrains</pattern>
                  <shadedPattern>autovalue.shaded.org.jetbrains</shadedPattern>
                </relocation>
                <relocation>
                  <pattern>org.objectweb</pattern>
                  <shadedPattern>autovalue.shaded.org.objectweb</shadedPattern>
                </relocation>
              </relocations>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>disable-java8-doclint</id>
      <activation>
        <jdk>[1.8,)</jdk>
      </activation>
      <properties>
        <additionalparam>-Xdoclint:none</additionalparam>
      </properties>
    </profile>
    <profile>
      <id>open-modules</id>
      <activation>
        <jdk>[9,)</jdk>
      </activation>
      <properties>
        <test.jvm.flags>--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED
            --add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED
            --add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED</test.jvm.flags>
      </properties>
    </profile>
    <profile>
      <id>exclude-module-tests</id>
      <activation>
        <jdk>(,9)</jdk>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
              <testExcludes>
                <exclude>**/AutoValueModuleCompilationTest.java</exclude>
              </testExcludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
